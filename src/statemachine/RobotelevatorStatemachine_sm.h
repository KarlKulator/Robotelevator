//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : RobotelevatorStatemachine.sm
//

#ifndef ROBOTELEVATORSTATEMACHINE_SM_H
#define ROBOTELEVATORSTATEMACHINE_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class MainMap;
class MainMap_Parked;
class MainMap_MovingDownTo2ndFloor;
class MainMap_WaitingForRobotExit2ndFloorRobotDocked;
class MainMap_WaitingForRobotExit2ndFloorRobotUndocked;
class MainMap_Cleaning2ndFloor;
class MainMap_WaitingForRobotEnter2ndFloorRobotDocked;
class MainMap_MovingDownTo1stFloor;
class MainMap_WaitingForRobotExit1stFloorRobotDocked;
class MainMap_WaitingForRobotExit1stFloorRobotUndocked;
class MainMap_Cleaning1stFloor;
class MainMap_WaitingForRobotEnter1stFloorRobotDocked;
class MainMap_MovingUpToParkingPosition;
class MainMap_Default;
class RobotelevatorStatemachineState;
class RobotelevatorStatemachineContext;
class RobotelevatorStatemachine;

class RobotelevatorStatemachineState :
    public statemap::State
{
public:

    RobotelevatorStatemachineState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(RobotelevatorStatemachineContext&) {};
    virtual void Exit(RobotelevatorStatemachineContext&) {};

    virtual void carrierButtonPressed1stFloor(RobotelevatorStatemachineContext& context);
    virtual void carrierButtonPressed2ndFloor(RobotelevatorStatemachineContext& context);
    virtual void carrierButtonPressedParkingPosition(RobotelevatorStatemachineContext& context);
    virtual void dockingTimePassed(RobotelevatorStatemachineContext& context, int dockingtimerId);
    virtual void robotButtonPressed1stFloor(RobotelevatorStatemachineContext& context);
    virtual void robotButtonPressed2ndFloor(RobotelevatorStatemachineContext& context);
    virtual void robotButtonReleased1stFloor(RobotelevatorStatemachineContext& context);
    virtual void robotButtonReleased2ndFloor(RobotelevatorStatemachineContext& context);
    virtual void startCleanup(RobotelevatorStatemachineContext& context);
    virtual void undockingTimePassed(RobotelevatorStatemachineContext& context, int undockingtimerId);

protected:

    virtual void Default(RobotelevatorStatemachineContext& context);
};

class MainMap
{
public:

    static MainMap_Parked Parked;
    static MainMap_MovingDownTo2ndFloor MovingDownTo2ndFloor;
    static MainMap_WaitingForRobotExit2ndFloorRobotDocked WaitingForRobotExit2ndFloorRobotDocked;
    static MainMap_WaitingForRobotExit2ndFloorRobotUndocked WaitingForRobotExit2ndFloorRobotUndocked;
    static MainMap_Cleaning2ndFloor Cleaning2ndFloor;
    static MainMap_WaitingForRobotEnter2ndFloorRobotDocked WaitingForRobotEnter2ndFloorRobotDocked;
    static MainMap_MovingDownTo1stFloor MovingDownTo1stFloor;
    static MainMap_WaitingForRobotExit1stFloorRobotDocked WaitingForRobotExit1stFloorRobotDocked;
    static MainMap_WaitingForRobotExit1stFloorRobotUndocked WaitingForRobotExit1stFloorRobotUndocked;
    static MainMap_Cleaning1stFloor Cleaning1stFloor;
    static MainMap_WaitingForRobotEnter1stFloorRobotDocked WaitingForRobotEnter1stFloorRobotDocked;
    static MainMap_MovingUpToParkingPosition MovingUpToParkingPosition;
};

class MainMap_Default :
    public RobotelevatorStatemachineState
{
public:

    MainMap_Default(const char * const name, const int stateId)
    : RobotelevatorStatemachineState(name, stateId)
    {};

};

class MainMap_Parked :
    public MainMap_Default
{
public:
    MainMap_Parked(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void startCleanup(RobotelevatorStatemachineContext& context);
};

class MainMap_MovingDownTo2ndFloor :
    public MainMap_Default
{
public:
    MainMap_MovingDownTo2ndFloor(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void carrierButtonPressed2ndFloor(RobotelevatorStatemachineContext& context);
};

class MainMap_WaitingForRobotExit2ndFloorRobotDocked :
    public MainMap_Default
{
public:
    MainMap_WaitingForRobotExit2ndFloorRobotDocked(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void robotButtonReleased2ndFloor(RobotelevatorStatemachineContext& context);
};

class MainMap_WaitingForRobotExit2ndFloorRobotUndocked :
    public MainMap_Default
{
public:
    MainMap_WaitingForRobotExit2ndFloorRobotUndocked(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void robotButtonPressed2ndFloor(RobotelevatorStatemachineContext& context);
    virtual void undockingTimePassed(RobotelevatorStatemachineContext& context, int undockingtimerId);
};

class MainMap_Cleaning2ndFloor :
    public MainMap_Default
{
public:
    MainMap_Cleaning2ndFloor(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void robotButtonPressed2ndFloor(RobotelevatorStatemachineContext& context);
};

class MainMap_WaitingForRobotEnter2ndFloorRobotDocked :
    public MainMap_Default
{
public:
    MainMap_WaitingForRobotEnter2ndFloorRobotDocked(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void dockingTimePassed(RobotelevatorStatemachineContext& context, int dockingtimerId);
    virtual void robotButtonReleased2ndFloor(RobotelevatorStatemachineContext& context);
};

class MainMap_MovingDownTo1stFloor :
    public MainMap_Default
{
public:
    MainMap_MovingDownTo1stFloor(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void carrierButtonPressed1stFloor(RobotelevatorStatemachineContext& context);
};

class MainMap_WaitingForRobotExit1stFloorRobotDocked :
    public MainMap_Default
{
public:
    MainMap_WaitingForRobotExit1stFloorRobotDocked(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void robotButtonReleased2ndFloor(RobotelevatorStatemachineContext& context);
};

class MainMap_WaitingForRobotExit1stFloorRobotUndocked :
    public MainMap_Default
{
public:
    MainMap_WaitingForRobotExit1stFloorRobotUndocked(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void robotButtonPressed1stFloor(RobotelevatorStatemachineContext& context);
    virtual void undockingTimePassed(RobotelevatorStatemachineContext& context, int undockingtimerId);
};

class MainMap_Cleaning1stFloor :
    public MainMap_Default
{
public:
    MainMap_Cleaning1stFloor(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void robotButtonPressed1stFloor(RobotelevatorStatemachineContext& context);
};

class MainMap_WaitingForRobotEnter1stFloorRobotDocked :
    public MainMap_Default
{
public:
    MainMap_WaitingForRobotEnter1stFloorRobotDocked(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void dockingTimePassed(RobotelevatorStatemachineContext& context, int dockingtimerId);
    virtual void robotButtonReleased1stFloor(RobotelevatorStatemachineContext& context);
};

class MainMap_MovingUpToParkingPosition :
    public MainMap_Default
{
public:
    MainMap_MovingUpToParkingPosition(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Default(RobotelevatorStatemachineContext& context);
    virtual void carrierButtonPressedParkingPosition(RobotelevatorStatemachineContext& context);
};

class RobotelevatorStatemachineContext :
    public statemap::FSMContext
{
public:

    explicit RobotelevatorStatemachineContext(RobotelevatorStatemachine& owner)
    : FSMContext(MainMap::Parked),
      _owner(owner)
    {};

    RobotelevatorStatemachineContext(RobotelevatorStatemachine& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline RobotelevatorStatemachine& getOwner()
    {
        return (_owner);
    };

    inline RobotelevatorStatemachineState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<RobotelevatorStatemachineState&>(*_state);
    };

    inline void carrierButtonPressed1stFloor()
    {
        getState().carrierButtonPressed1stFloor(*this);
    };

    inline void carrierButtonPressed2ndFloor()
    {
        getState().carrierButtonPressed2ndFloor(*this);
    };

    inline void carrierButtonPressedParkingPosition()
    {
        getState().carrierButtonPressedParkingPosition(*this);
    };

    inline void dockingTimePassed(int dockingtimerId)
    {
        getState().dockingTimePassed(*this, dockingtimerId);
    };

    inline void robotButtonPressed1stFloor()
    {
        getState().robotButtonPressed1stFloor(*this);
    };

    inline void robotButtonPressed2ndFloor()
    {
        getState().robotButtonPressed2ndFloor(*this);
    };

    inline void robotButtonReleased1stFloor()
    {
        getState().robotButtonReleased1stFloor(*this);
    };

    inline void robotButtonReleased2ndFloor()
    {
        getState().robotButtonReleased2ndFloor(*this);
    };

    inline void startCleanup()
    {
        getState().startCleanup(*this);
    };

    inline void undockingTimePassed(int undockingtimerId)
    {
        getState().undockingTimePassed(*this, undockingtimerId);
    };

private:
    RobotelevatorStatemachine& _owner;
};


#endif // ROBOTELEVATORSTATEMACHINE_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
